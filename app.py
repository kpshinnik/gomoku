from flask import Flask, render_template, request, jsonify
import json
import os
from game_logic import GameLogic
from ai_player import AIPlayer
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    'game': None,
    'ai': None,
    'user_symbol': 'X',
    'ai_symbol': 'O'
}

def init_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    global game_state
    game_state['game'] = GameLogic()
    game_state['ai'] = AIPlayer(game_state['ai_symbol'])
    logger.info("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/new_game', methods=['POST'])
def new_game():
    try:
        data = request.get_json()
        user_choice = data.get('symbol', 'X')
        
        game_state['user_symbol'] = user_choice
        game_state['ai_symbol'] = 'O' if user_choice == 'X' else 'X'
        
        init_game()
        
        response = {
            'success': True,
            'board': game_state['game'].board,
            'current_player': game_state['game'].current_player,
            'user_symbol': game_state['user_symbol'],
            'ai_symbol': game_state['ai_symbol'],
            'move_count': game_state['game'].move_count
        }
        
        logger.info(f"‚úÖ –ù–æ–≤–∞—è –∏–≥—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_choice}, –ò–ò={game_state['ai_symbol']}")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/make_move', methods=['POST'])
def make_move():
    try:
        if not game_state['game']:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        data = request.get_json()
        row = data.get('row')
        col = data.get('col')
        
        if row is None or col is None:
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        if game_state['game'].current_player != game_state['user_symbol']:
            return jsonify({'success': False, 'error': '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥'})
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        success = game_state['game'].make_move(row, col, game_state['user_symbol'])
        if not success:
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
        if game_state['game'].check_winner():
            return jsonify({
                'success': True,
                'board': game_state['game'].board,
                'winner': game_state['user_symbol'],
                'game_over': True,
                'move_count': game_state['game'].move_count
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
        if game_state['game'].is_board_full():
            return jsonify({
                'success': True,
                'board': game_state['game'].board,
                'winner': None,
                'game_over': True,
                'move_count': game_state['game'].move_count
            })
        
        # –•–æ–¥ –ò–ò
        ai_move = game_state['ai'].get_move(game_state['game'])
        if ai_move:
            ai_row, ai_col = ai_move
            game_state['game'].make_move(ai_row, ai_col, game_state['ai_symbol'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –ò–ò
            if game_state['game'].check_winner():
                return jsonify({
                    'success': True,
                    'board': game_state['game'].board,
                    'winner': game_state['ai_symbol'],
                    'game_over': True,
                    'ai_move': [ai_row, ai_col],
                    'move_count': game_state['game'].move_count
                })
        
        return jsonify({
            'success': True,
            'board': game_state['game'].board,
            'current_player': game_state['game'].current_player,
            'ai_move': ai_move,
            'move_count': game_state['game'].move_count
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/ai_move', methods=['POST'])
def ai_move():
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ö–æ–¥ –ò–ò"""
    try:
        if not game_state['game'] or not game_state['ai']:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        if game_state['game'].game_over:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ò–ò
        if game_state['game'].current_player != game_state['ai_symbol']:
            return jsonify({'success': False, 'error': '–°–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥ –ò–ò'})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ–¥ –ò–ò
        ai_move = game_state['ai'].get_move(game_state['game'])
        
        if not ai_move:
            return jsonify({'success': False, 'error': '–ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥'})
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        row, col = ai_move
        success = game_state['game'].make_move(row, col, game_state['ai_symbol'])
        
        if not success:
            return jsonify({'success': False, 'error': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –ò–ò'})
        
        logger.info(f"‚úÖ –•–æ–¥ {game_state['ai_symbol']} –Ω–∞ ({row}, {col}), —Å—á–µ—Ç—á–∏–∫: {game_state['game'].move_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if game_state['game'].check_winner():
            logger.info(f"üèÜ –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ {game_state['ai_symbol']}!")
            return jsonify({
                'success': True,
                'board': game_state['game'].board,
                'current_player': game_state['game'].current_player,
                'move_count': game_state['game'].move_count,
                'ai_move': [row, col],
                'game_over': True,
                'winner': game_state['ai_symbol']
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
        if game_state['game'].is_board_full():
            return jsonify({
                'success': True,
                'board': game_state['game'].board,
                'current_player': game_state['game'].current_player,
                'move_count': game_state['game'].move_count,
                'ai_move': [row, col],
                'game_over': True,
                'winner': None
            })
        
        return jsonify({
            'success': True,
            'board': game_state['game'].board,
            'current_player': game_state['game'].current_player,
            'move_count': game_state['game'].move_count,
            'ai_move': [row, col],
            'game_over': False,
            'winner': None
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –ò–ò: {e}")
        return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ –ò–ò: {str(e)}'})

@app.route('/api/game_state', methods=['GET'])
def get_game_state():
    try:
        if not game_state['game']:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        return jsonify({
            'success': True,
            'board': game_state['game'].board,
            'current_player': game_state['game'].current_player,
            'user_symbol': game_state['user_symbol'],
            'ai_symbol': game_state['ai_symbol'],
            'move_count': game_state['game'].move_count
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return jsonify({'success': False, 'error': str(e)})

if __name__ == '__main__':
    init_game()
    # –ó–∞–ø—É—Å–∫ –ë–ï–ó debug —Ä–µ–∂–∏–º–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å watchdog
    app.run(host='127.0.0.1', port=5001, debug=False, threaded=True) 