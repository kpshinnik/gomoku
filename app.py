from flask import Flask, render_template, request, jsonify, session
import json
import os
from game_logic import GameLogic
from ai_player import AIPlayer
import logging
import secrets
import datetime
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', secrets.token_hex(32))

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOGS_DIR = 'game_logs'
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

def get_next_game_index(winner_type):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞"""
    pattern = os.path.join(LOGS_DIR, f"{winner_type}-*.json")
    existing_files = glob.glob(pattern)
    
    if not existing_files:
        return 1
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    indices = []
    for file_path in existing_files:
        filename = os.path.basename(file_path)
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –º–µ–∂–¥—É –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ .json
            index_str = filename.split('-')[1].split('.')[0]
            indices.append(int(index_str))
        except (IndexError, ValueError):
            continue
    
    return max(indices) + 1 if indices else 1

def save_game_log(game, winner, user_symbol, ai_symbol):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –∏–≥—Ä—ã –≤ —Ñ–∞–π–ª"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if winner == user_symbol:
            winner_type = "human"
        elif winner == ai_symbol:
            winner_type = "AI"
        else:
            winner_type = "draw"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
        game_index = get_next_game_index(winner_type)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∞
        game_log = {
            'game_id': f"{winner_type}-{game_index}",
            'timestamp': datetime.datetime.now().isoformat(),
            'winner': winner,
            'winner_type': winner_type,
            'user_symbol': user_symbol,
            'ai_symbol': ai_symbol,
            'total_moves': game.move_count,
            'final_board': game.board,
            'game_duration_moves': game.move_count,
            'result': {
                'human_won': winner == user_symbol,
                'ai_won': winner == ai_symbol,
                'draw': winner is None
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"{winner_type}-{game_index}.json"
        filepath = os.path.join(LOGS_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(game_log, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìù –õ–æ–≥ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –∏–≥—Ä—ã: {e}")
        return None

def init_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    session['game_board'] = [['.'] * 15 for _ in range(15)]
    session['current_player'] = 'X'
    session['move_count'] = 0
    session['game_over'] = False
    session['winner'] = None
    logger.info("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def get_game_logic():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç GameLogic –∏–∑ —Å–µ—Å—Å–∏–∏"""
    if 'game_board' not in session:
        init_game()
    
    game = GameLogic()
    game.board = session['game_board']
    game.current_player = session['current_player']
    game.move_count = session['move_count']
    game.game_over = session['game_over']
    game.winner = session['winner']
    return game

def save_game_state(game):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏—é"""
    session['game_board'] = game.board
    session['current_player'] = game.current_player
    session['move_count'] = game.move_count
    session['game_over'] = game.game_over
    session['winner'] = game.winner

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/new_game', methods=['POST'])
def new_game():
    try:
        data = request.get_json()
        user_choice = data.get('symbol', 'X')
        
        session['user_symbol'] = user_choice
        session['ai_symbol'] = 'O' if user_choice == 'X' else 'X'
        
        init_game()
        game = get_game_logic()
        ai = AIPlayer(session['ai_symbol'])
        
        # –ï—Å–ª–∏ –ò–ò –∏–≥—Ä–∞–µ—Ç –∑–∞ X (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª O), –ò–ò —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        ai_move = None
        if session['ai_symbol'] == 'X':
            logger.info("ü§ñ –ò–ò –∏–≥—Ä–∞–µ—Ç –∑–∞ X, –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥")
            ai_move_result = ai.get_move(game)
            if ai_move_result:
                ai_row, ai_col = ai_move_result
                logger.info(f"ü§ñ –ò–ò –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–∞ ({ai_row}, {ai_col})")
                success = game.make_move(ai_row, ai_col, session['ai_symbol'])
                if success:
                    ai_move = [ai_row, ai_col]
                    save_game_state(game)
                    logger.info(f"‚úÖ –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –ò–ò {session['ai_symbol']} –Ω–∞ ({ai_row}, {ai_col}), —Å—á–µ—Ç—á–∏–∫: {game.move_count}")
                else:
                    logger.error(f"‚ùå –ò–ò –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–∞ ({ai_row}, {ai_col})")
        
        response = {
            'success': True,
            'board': game.board,
            'current_player': game.current_player,
            'user_symbol': session['user_symbol'],
            'ai_symbol': session['ai_symbol'],
            'move_count': game.move_count,
            'ai_move': ai_move
        }
        
        logger.info(f"‚úÖ –ù–æ–≤–∞—è –∏–≥—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_choice}, –ò–ò={session['ai_symbol']}")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/make_move', methods=['POST'])
def make_move():
    try:
        if 'user_symbol' not in session:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        data = request.get_json()
        row = data.get('row')
        col = data.get('col')
        
        if row is None or col is None:
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'})
        
        game = get_game_logic()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        if game.current_player != session['user_symbol']:
            return jsonify({'success': False, 'error': '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥'})
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        success = game.make_move(row, col, session['user_symbol'])
        if not success:
            return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥'})
        
        save_game_state(game)
        logger.info(f"‚úÖ –•–æ–¥ –∏–≥—Ä–æ–∫–∞ {session['user_symbol']} –Ω–∞ ({row}, {col}), —Å—á–µ—Ç—á–∏–∫: {game.move_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
        if game.check_winner():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–≥—Ä—ã
            save_game_log(game, session['user_symbol'], session['user_symbol'], session['ai_symbol'])
            return jsonify({
                'success': True,
                'board': game.board,
                'winner': session['user_symbol'],
                'game_over': True,
                'move_count': game.move_count
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
        if game.is_board_full():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–≥—Ä—ã (–Ω–∏—á—å—è)
            save_game_log(game, None, session['user_symbol'], session['ai_symbol'])
            return jsonify({
                'success': True,
                'board': game.board,
                'winner': None,
                'game_over': True,
                'move_count': game.move_count
            })
        
        # –•–æ–¥ –ò–ò
        ai = AIPlayer(session['ai_symbol'])
        ai_move = ai.get_move(game)
        if ai_move:
            ai_row, ai_col = ai_move
            logger.info(f"ü§ñ –ò–ò –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–∞ ({ai_row}, {ai_col})")
            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ [{ai_row}][{ai_col}]: '{game.board[ai_row][ai_col]}'")
            ai_success = game.make_move(ai_row, ai_col, session['ai_symbol'])
            
            if not ai_success:
                logger.error(f"‚ùå –ò–ò –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–∞ ({ai_row}, {ai_col})")
                return jsonify({
                    'success': True,
                    'board': game.board,
                    'current_player': game.current_player,
                    'ai_move': None,
                    'move_count': game.move_count,
                    'error': f'–ò–ò –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–∞ ({ai_row}, {ai_col})'
                })
            
            save_game_state(game)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –ò–ò
            if game.check_winner():
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–≥—Ä—ã
                save_game_log(game, session['ai_symbol'], session['user_symbol'], session['ai_symbol'])
                return jsonify({
                    'success': True,
                    'board': game.board,
                    'winner': session['ai_symbol'],
                    'game_over': True,
                    'ai_move': [ai_row, ai_col],
                    'move_count': game.move_count
                })
        
        return jsonify({
            'success': True,
            'board': game.board,
            'current_player': game.current_player,
            'ai_move': ai_move,
            'move_count': game.move_count
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/ai_move', methods=['POST'])
def ai_move():
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ö–æ–¥ –ò–ò"""
    try:
        if 'ai_symbol' not in session:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        game = get_game_logic()
        
        if game.game_over:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥ –ò–ò
        if game.current_player != session['ai_symbol']:
            return jsonify({'success': False, 'error': '–°–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥ –ò–ò'})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ–¥ –ò–ò
        ai = AIPlayer(session['ai_symbol'])
        ai_move = ai.get_move(game)
        
        if not ai_move:
            return jsonify({'success': False, 'error': '–ò–ò –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥'})
        
        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        row, col = ai_move
        success = game.make_move(row, col, session['ai_symbol'])
        
        if not success:
            return jsonify({'success': False, 'error': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –ò–ò'})
        
        save_game_state(game)
        logger.info(f"‚úÖ –•–æ–¥ {session['ai_symbol']} –Ω–∞ ({row}, {col}), —Å—á–µ—Ç—á–∏–∫: {game.move_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if game.check_winner():
            logger.info(f"üèÜ –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ {session['ai_symbol']}!")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–≥—Ä—ã
            save_game_log(game, session['ai_symbol'], session['user_symbol'], session['ai_symbol'])
            return jsonify({
                'success': True,
                'board': game.board,
                'current_player': game.current_player,
                'move_count': game.move_count,
                'winner': session['ai_symbol'],
                'game_over': True
            })
        
        return jsonify({
            'success': True,
            'board': game.board,
            'current_player': game.current_player,
            'move_count': game.move_count
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –ò–ò: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/game_state', methods=['GET'])
def get_game_state():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
    try:
        if 'user_symbol' not in session:
            return jsonify({'success': False, 'error': '–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
        
        game = get_game_logic()
        
        return jsonify({
            'success': True,
            'board': game.board,
            'current_player': game.current_player,
            'user_symbol': session.get('user_symbol'),
            'ai_symbol': session.get('ai_symbol'),
            'move_count': game.move_count,
            'game_over': game.game_over,
            'winner': game.winner
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/game_stats', methods=['GET'])
def get_game_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
        ai_wins = len(glob.glob(os.path.join(LOGS_DIR, "AI-*.json")))
        human_wins = len(glob.glob(os.path.join(LOGS_DIR, "human-*.json")))
        draws = len(glob.glob(os.path.join(LOGS_DIR, "draw-*.json")))
        total_games = ai_wins + human_wins + draws
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        ai_win_rate = (ai_wins / total_games * 100) if total_games > 0 else 0
        human_win_rate = (human_wins / total_games * 100) if total_games > 0 else 0
        draw_rate = (draws / total_games * 100) if total_games > 0 else 0
        
        return jsonify({
            'success': True,
            'stats': {
                'total_games': total_games,
                'ai_wins': ai_wins,
                'human_wins': human_wins,
                'draws': draws,
                'ai_win_rate': round(ai_win_rate, 1),
                'human_win_rate': round(human_win_rate, 1),
                'draw_rate': round(draw_rate, 1)
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'success': False, 'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001) 