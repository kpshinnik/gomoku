import logging

logger = logging.getLogger(__name__)

class GameLogic:
    def __init__(self, board_size=15):
        self.board_size = board_size
        self.board = [['.' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = 'X'  # X –≤—Å–µ–≥–¥–∞ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        self.move_count = 0
        self.game_over = False
        self.winner = None
        
    def make_move(self, row, col, player=None):
        """–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥"""
        if player is None:
            player = self.current_player
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if self.game_over:
            logger.warning("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞")
            return False
            
        if not (0 <= row < self.board_size and 0 <= col < self.board_size):
            logger.warning(f"‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ—Å–∫–∏: ({row}, {col})")
            return False
            
        if self.board[row][col] != '.':
            logger.warning(f"‚ö†Ô∏è –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞: ({row}, {col})")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞)
        if self.move_count > 0 and not self._has_adjacent_piece(row, col):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —Ñ–∏–≥—É—Ä –¥–ª—è —Ö–æ–¥–∞ ({row}, {col})")
            return False
            
        # –î–µ–ª–∞–µ–º —Ö–æ–¥
        self.board[row][col] = player
        self.move_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if self.check_winner():
            self.game_over = True
            self.winner = player
            logger.info(f"üèÜ –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ {player}!")
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
            self.current_player = 'O' if self.current_player == 'X' else 'X'
            
        logger.info(f"‚úÖ –•–æ–¥ {player} –Ω–∞ ({row}, {col}), —Å—á–µ—Ç—á–∏–∫: {self.move_count}")
        return True
        
    def _has_adjacent_piece(self, row, col):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ñ–∏–≥—É—Ä"""
        directions = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
        
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if (0 <= nr < self.board_size and 0 <= nc < self.board_size and 
                self.board[nr][nc] != '.'):
                return True
        return False
        
    def check_winner(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        if self.winner:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ñ–∏–≥—É—Ä–∞–º–∏
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col] != '.':
                    if self._check_win_from_position(row, col, self.board[row][col]):
                        self.winner = self.board[row][col]
                        return True
        return False
        
    def _check_win_from_position(self, row, col, player):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–±–µ–¥—É –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        directions = [(0,1), (1,0), (1,1), (1,-1)]
        
        for dr, dc in directions:
            count = 1  # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            r, c = row + dr, col + dc
            while (0 <= r < self.board_size and 0 <= c < self.board_size and 
                   self.board[r][c] == player):
                count += 1
                r, c = r + dr, c + dc
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏  
            r, c = row - dr, col - dc
            while (0 <= r < self.board_size and 0 <= c < self.board_size and 
                   self.board[r][c] == player):
                count += 1
                r, c = r - dr, c - dc
                
            if count >= 5:
                return True
                
        return False
        
    def get_valid_moves(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ö–æ–¥–æ–≤"""
        if self.game_over:
            return []
            
        valid_moves = []
        
        # –ü–µ—Ä–≤—ã–π —Ö–æ–¥ - –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤–µ–∑–¥–µ
        if self.move_count == 0:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
            center = self.board_size // 2
            for row in range(center-2, center+3):
                for col in range(center-2, center+3):
                    if 0 <= row < self.board_size and 0 <= col < self.board_size:
                        valid_moves.append([row, col])
            return valid_moves
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä—è–¥–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –∏—â–µ–º —Å–æ—Å–µ–¥–µ–π –∑–∞–Ω—è—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
        occupied_neighbors = set()
        
        for row in range(self.board_size):
            for col in range(self.board_size):
                if self.board[row][col] != '.':
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π —ç—Ç–æ–π –∑–∞–Ω—è—Ç–æ–π –∫–ª–µ—Ç–∫–∏
                    for dr in [-1, 0, 1]:
                        for dc in [-1, 0, 1]:
                            if dr == 0 and dc == 0:
                                continue
                            nr, nc = row + dr, col + dc
                            if (0 <= nr < self.board_size and 0 <= nc < self.board_size and 
                                self.board[nr][nc] == '.'):
                                occupied_neighbors.add((nr, nc))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        valid_moves = [[r, c] for r, c in occupied_neighbors]
        
        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ö–æ–¥–æ–≤: {len(valid_moves)}")
        return valid_moves
        
    def is_board_full(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –¥–æ—Å–∫–∞"""
        for row in self.board:
            for cell in row:
                if cell == '.':
                    return False
        return True
        
    def reset_game(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É"""
        self.board = [['.' for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.current_player = 'X'
        self.move_count = 0
        self.game_over = False
        self.winner = None
        logger.info("üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        
    def get_board_state(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏"""
        return {
            'board': self.board,
            'current_player': self.current_player,
            'move_count': self.move_count,
            'game_over': self.game_over,
            'winner': self.winner
        }

    def is_valid_move(self, row, col):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤ –¥–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É"""        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å–∫–∏
        if row < 0 or row >= self.board_size or col < 0 or col >= self.board_size:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
        if self.board[row][col] != '.':
            return False
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ
        if self.move_count == 0:
            return True
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return self._has_adjacent_piece(row, col)
    
 