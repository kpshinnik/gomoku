let gameState = {
    board: [],
    currentPlayer: 'X',
    userSymbol: 'X',
    aiSymbol: 'O',
    gameOver: false,
    winner: null,
    moveCount: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeBoard();
    setupEventListeners();
    showSymbolChoice();
});

function initializeBoard() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–∫–∏');
    
    const gameBoard = document.getElementById('game-board');
    if (!gameBoard) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç game-board –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    gameBoard.innerHTML = '';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    gameState.board = [];
    for (let row = 0; row < 15; row++) {
        gameState.board[row] = [];
        for (let col = 0; col < 15; col++) {
            gameState.board[row][col] = '.';
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 15x15
    for (let row = 0; row < 15; row++) {
        for (let col = 0; col < 15; col++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.row = row;
            cell.dataset.col = col;
            cell.addEventListener('click', () => handleCellClick(row, col));
            gameBoard.appendChild(cell);
        }
    }
    
    console.log('‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: 225 –∫–ª–µ—Ç–æ–∫');
}

function setupEventListeners() {
    document.getElementById('new-game').addEventListener('click', showSymbolChoice);
    document.getElementById('restart').addEventListener('click', showSymbolChoice);
    document.getElementById('select-x').addEventListener('click', () => chooseSymbol('X'));
    document.getElementById('select-o').addEventListener('click', () => chooseSymbol('O'));
}

function showSymbolChoice() {
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
    gameState.gameOver = false;
    gameState.winner = null;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
    document.querySelector('.symbol-selection').style.display = 'block';
    document.getElementById('game-status').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–∏–º–≤–æ–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"';
    
    // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É
    initializeBoard();
}

function chooseSymbol(symbol) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.querySelectorAll('.symbol-selection button').forEach(btn => btn.classList.remove('active'));
    if (symbol === 'X') {
        document.getElementById('select-x').classList.add('active');
    } else {
        document.getElementById('select-o').classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    document.getElementById('human-symbol').textContent = symbol;
    document.getElementById('ai-symbol').textContent = symbol === 'X' ? 'O' : 'X';
    
    startNewGame(symbol);
}

async function startNewGame(userSymbol) {
    try {
        showStatus('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã...');
        
        const response = await fetch('/api/new_game', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ symbol: userSymbol })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            gameState.userSymbol = data.user_symbol;
            gameState.aiSymbol = data.ai_symbol;
            gameState.currentPlayer = data.current_player;
            gameState.gameOver = false;
            gameState.winner = null;
            gameState.moveCount = data.move_count || 0;
            
            updateBoard(data.board);
            updateGameInfo(data);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
            document.querySelector('.symbol-selection').style.display = 'none';
            
            // –ï—Å–ª–∏ –ò–ò –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª O)
            if (data.current_player !== userSymbol) {
                showStatus(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${userSymbol}. –ò–ò –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥...`);
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ö–æ–¥–æ–º –ò–ò
                setTimeout(() => requestAIMove(), 500);
            } else {
                showStatus(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${userSymbol}. –í–∞—à —Ö–æ–¥!`);
            }
            
            console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data);
        } else {
            showStatus(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: ${data.error}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', data);
        }
    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

async function handleCellClick(row, col) {
    console.log(`üéØ –ö–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ [${row}][${col}]`);
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', gameState);
    
    if (gameState.gameOver) {
        console.log('‚èπÔ∏è –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞');
        showStatus('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.');
        return;
    }
    
    if (gameState.currentPlayer !== gameState.userSymbol) {
        console.log(`‚ùå –ù–µ –≤–∞—à —Ö–æ–¥! –¢–µ–∫—É—â–∏–π: ${gameState.currentPlayer}, –í–∞—à: ${gameState.userSymbol}`);
        showStatus('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (gameState.board[row] && gameState.board[row][col] !== '.') {
        console.log(`‚ùå –ö–ª–µ—Ç–∫–∞ [${row}][${col}] —É–∂–µ –∑–∞–Ω—è—Ç–∞:`, gameState.board[row][col]);
        showStatus('–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!');
        return;
    }
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞ [${row}][${col}]`);
    
    try {
        showStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ö–æ–¥–∞...');
        
        const response = await fetch('/api/make_move', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ row: row, col: col })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            gameState.board = data.board;
            gameState.currentPlayer = data.current_player;
            gameState.moveCount = data.move_count || 0;
            
            updateBoard(data.board);
            updateGameInfo(data);
            
            if (data.game_over) {
                gameState.gameOver = true;
                gameState.winner = data.winner;
                
                if (data.winner === gameState.userSymbol) {
                    showStatus('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
                } else if (data.winner === gameState.aiSymbol) {
                    showStatus('üòî –ò–ò –≤—ã–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
                } else {
                    showStatus('ü§ù –ù–∏—á—å—è!');
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–¥ –ò–ò, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–¥–µ–ª–∞–Ω
                if (data.ai_move) {
                    const [aiRow, aiCol] = data.ai_move;
                    highlightLastMove(aiRow, aiCol);
                    showStatus(`–ò–ò —Å—Ö–æ–¥–∏–ª –Ω–∞ ${String.fromCharCode(65 + aiCol)}${aiRow + 1}. –í–∞—à —Ö–æ–¥!`);
                } else {
                    showStatus('–í–∞—à —Ö–æ–¥!');
                }
            }
            
            console.log('‚úÖ –•–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', data);
        } else {
            showStatus(`–û—à–∏–±–∫–∞ —Ö–æ–¥–∞: ${data.error}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', data);
        }
    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

function updateBoard(board) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏:', board);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.board = board;
    
    for (let row = 0; row < 15; row++) {
        for (let col = 0; col < 15; col++) {
            const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
            if (!cell) {
                console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–µ—Ç–∫–∞ [${row}][${col}]`);
                continue;
            }
            
            const cellValue = board[row][col];
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–ª–µ—Ç–∫—É
            cell.textContent = '';
            cell.className = 'cell';
            
            if (cellValue === 'X') {
                cell.textContent = 'X';
                cell.classList.add('x');
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
                cell.style.color = '#e74c3c';
                cell.style.backgroundColor = '#fadbd8';
                cell.style.fontWeight = 'bold';
                console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω X –≤ [${row}][${col}]`);
            } else if (cellValue === 'O') {
                cell.textContent = 'O';
                cell.classList.add('o');
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
                cell.style.color = '#3498db';
                cell.style.backgroundColor = '#d6eaf8';
                cell.style.fontWeight = 'bold';
                console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω O –≤ [${row}][${col}]`);
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
                cell.style.color = '';
                cell.style.backgroundColor = '';
                cell.style.fontWeight = '';
            }
        }
    }
    
    console.log('‚úÖ –î–æ—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

function updateGameInfo(data) {
    document.getElementById('current-player').textContent = data.current_player || gameState.currentPlayer;
    document.getElementById('move-count').textContent = data.move_count || gameState.moveCount || 0;
    document.getElementById('human-symbol').textContent = data.user_symbol || gameState.userSymbol;
    document.getElementById('ai-symbol').textContent = data.ai_symbol || gameState.aiSymbol;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (data.current_player) gameState.currentPlayer = data.current_player;
    if (data.move_count !== undefined) gameState.moveCount = data.move_count;
    if (data.user_symbol) gameState.userSymbol = data.user_symbol;
    if (data.ai_symbol) gameState.aiSymbol = data.ai_symbol;
}

function highlightLastMove(row, col) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
    document.querySelectorAll('.cell.last-move').forEach(cell => {
        cell.classList.remove('last-move');
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ö–æ–¥—É
    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
    if (cell) {
        cell.classList.add('last-move');
    }
}

function showStatus(message) {
    document.getElementById('game-status').textContent = message;
}

async function requestAIMove() {
    try {
        showStatus('–ò–ò –¥—É–º–∞–µ—Ç...');
        
        const response = await fetch('/api/ai_move', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            gameState.board = data.board;
            gameState.currentPlayer = data.current_player;
            gameState.moveCount = data.move_count || 0;
            
            updateBoard(data.board);
            updateGameInfo(data);
            
            if (data.game_over) {
                gameState.gameOver = true;
                gameState.winner = data.winner;
                
                if (data.winner === gameState.userSymbol) {
                    showStatus('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
                } else if (data.winner === gameState.aiSymbol) {
                    showStatus('üòî –ò–ò –≤—ã–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
                } else {
                    showStatus('ü§ù –ù–∏—á—å—è!');
                }
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–¥ –ò–ò
                if (data.ai_move) {
                    const [aiRow, aiCol] = data.ai_move;
                    highlightLastMove(aiRow, aiCol);
                    showStatus(`–ò–ò —Å—Ö–æ–¥–∏–ª –Ω–∞ ${String.fromCharCode(65 + aiCol)}${aiRow + 1}. –í–∞—à —Ö–æ–¥!`);
                } else {
                    showStatus('–í–∞—à —Ö–æ–¥!');
                }
            }
            
            console.log('‚úÖ –•–æ–¥ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', data);
        } else {
            showStatus(`–û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –ò–ò: ${data.error}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –ò–ò:', data);
        }
    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ö–æ–¥–∞ –ò–ò:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
async function getGameState() {
    try {
        const response = await fetch('/api/game_state');
        const data = await response.json();
        
        if (data.success) {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            gameState.board = data.board;
            gameState.currentPlayer = data.current_player;
            gameState.moveCount = data.move_count || 0;
            gameState.gameOver = data.game_over || false;
            gameState.winner = data.winner;
            
            updateBoard(data.board);
            updateGameInfo(data);
            
            console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', data);
            return data;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
// setInterval(async () => {
//     if (!gameState.gameOver) {
//         await getGameState();
//     }
// }, 5000);

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function testBoardUpdate() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏');
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–æ—Å–∫—É
    const testBoard = [];
    for (let row = 0; row < 15; row++) {
        testBoard[row] = [];
        for (let col = 0; col < 15; col++) {
            testBoard[row][col] = '.';
        }
    }
    
    // –°—Ç–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–≥—É—Ä
    testBoard[7][7] = 'X';
    testBoard[7][8] = 'O';
    testBoard[8][7] = 'X';
    
    console.log('üß™ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    updateBoard(testBoard);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.testBoardUpdate = testBoardUpdate; 