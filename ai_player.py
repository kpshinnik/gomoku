import random
import time
import logging
from typing import List, Tuple, Dict, Optional, Set

logger = logging.getLogger(__name__)

class AIPlayer:
    def __init__(self, symbol, max_depth=6):
        self.symbol = symbol
        self.opponent_symbol = 'X' if symbol == 'O' else 'O'
        self.max_depth = max_depth
        self.max_time = 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∏–≥—Ä—ã
        self.winning_patterns = {
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞/–∑–∞—â–∏—Ç–∞)
            'FIVE': 1000000,
            'OPEN_FOUR': 100000,
            'FOUR_THREE': 50000,  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è 4+3
            'DOUBLE_THREE': 25000,  # –î–≤–æ–π–Ω–∞—è —Ç—Ä–æ–π–∫–∞
            
            # –°–∏–ª—å–Ω—ã–µ –∞—Ç–∞–∫—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            'FOUR': 10000,
            'BROKEN_FOUR': 8000,  # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞
            'OPEN_THREE': 5000,
            'THREE': 1000,
            
            # –ó–∞—â–∏—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            'BLOCK_FOUR': 15000,
            'BLOCK_THREE': 3000,
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
            'CENTER_CONTROL': 500,
            'ADJACENCY': 100,
            'CORNER_TRAP': 2000,
            'SPACE_CONTROL': 800,  # –ù–æ–≤—ã–π: –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            'DEVELOPMENT_POTENTIAL': 600,  # –ù–æ–≤—ã–π: –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è
        }
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–Ω–∏–π
        self.directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ö–æ–¥–æ–≤
        self.opening_book = {
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–µ–±—é—Ç—ã
            (7, 7): [(6, 6), (6, 7), (6, 8), (7, 6), (7, 8), (8, 6), (8, 7), (8, 8)],
            # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ–±—é—Ç—ã
            (6, 6): [(7, 7), (5, 5), (8, 8), (7, 6), (6, 7)],
            (8, 8): [(7, 7), (9, 9), (6, 6), (7, 8), (8, 7)],
        }
        
    def get_move(self, game) -> Optional[Tuple[int, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è –ò–ò –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–∏–≥—Ä—ã—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        start_time = time.time()
        
        try:
            valid_moves = game.get_valid_moves()
            if not valid_moves:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –ò–ò")
                return None
                
            logger.info(f"ü§ñ –ò–ò –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ {len(valid_moves)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤")
            
            # –î–µ–±—é—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ö–æ–¥–æ–≤
            opening_move = self._get_opening_move(game, valid_moves)
            if opening_move:
                logger.info(f"üìö –î–µ–±—é—Ç–Ω—ã–π —Ö–æ–¥: {opening_move}")
                return opening_move
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ö–æ–¥—ã (–ø–æ–±–µ–¥–∞/–∑–∞—â–∏—Ç–∞)
            critical_move = self._find_critical_move(game, valid_moves)
            if critical_move:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥: {critical_move}")
                return critical_move
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            aggressive_move = self._find_aggressive_move(game, valid_moves)
            if aggressive_move:
                logger.info(f"‚öîÔ∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ö–æ–¥: {aggressive_move}")
                return aggressive_move
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–∏—Å–∫ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            winning_move = self._find_winning_sequence(game, valid_moves)
            if winning_move:
                logger.info(f"üèÜ –ù–∞–π–¥–µ–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {winning_move}")
                return winning_move
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑ (–ø–æ–Ω–∏–∂–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            slow_threat_defense = self._find_slow_threat_defense(game, valid_moves)
            if slow_threat_defense:
                logger.info(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–π —É–≥—Ä–æ–∑—ã: {slow_threat_defense}")
                return slow_threat_defense
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
            best_move = self._find_strategic_move(game, valid_moves, start_time)
            
            elapsed_time = time.time() - start_time
            logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª —Ö–æ–¥ {best_move} –∑–∞ {elapsed_time:.2f}—Å")
            
            return best_move
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
            return random.choice(valid_moves) if valid_moves else None
    
    def _get_opening_move(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–î–µ–±—é—Ç–Ω—ã–µ —Ö–æ–¥—ã –∏–∑ –∫–Ω–∏–≥–∏"""
        if game.move_count == 0:
            # –ü–µ—Ä–≤—ã–π —Ö–æ–¥ - –≤—Å–µ–≥–¥–∞ —Ü–µ–Ω—Ç—Ä
            center = game.board_size // 2
            return (center, center)
        
        if game.move_count <= 4:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            last_opponent_move = self._find_last_opponent_move(game.board)
            if last_opponent_move and last_opponent_move in self.opening_book:
                candidates = [move for move in self.opening_book[last_opponent_move] 
                            if move in valid_moves]
                if candidates:
                    return random.choice(candidates)
        
        return None
    
    def _find_last_opponent_move(self, board) -> Optional[Tuple[int, int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"""
        for row in range(len(board)):
            for col in range(len(board[0])):
                if board[row][col] == self.opponent_symbol:
                    return (row, col)
        return None
    
    def _find_winning_sequence(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        board = game.board
        
        # –ò—â–µ–º —Ö–æ–¥—ã, —Å–æ–∑–¥–∞—é—â–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
        for row, col in valid_moves:
            threats_count = self._count_threats_after_move(board, row, col, self.symbol)
            
            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º 2+ —É–≥—Ä–æ–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
            if threats_count >= 2:
                return (row, col)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é 4+3 (—á–µ—Ç–≤–µ—Ä–∫–∞ + —Ç—Ä–æ–π–∫–∞)
            if self._creates_four_three_combo(board, row, col, self.symbol):
                return (row, col)
        
        return None
    
    def _count_threats_after_move(self, board, row, col, symbol) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥—Ä–æ–∑ –ø–æ—Å–ª–µ —Ö–æ–¥–∞"""
        board[row][col] = symbol
        threats = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        for dr, dc in self.directions:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–Ω–∏—é –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            line_threats = self._analyze_line_threats(board, row, col, dr, dc, symbol)
            threats += line_threats
        
        board[row][col] = '.'
        return threats
    
    def _analyze_line_threats(self, board, row, col, dr, dc, symbol) -> int:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–≥—Ä–æ–∑—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        threats = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π 9 (4 –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É + —Ü–µ–Ω—Ç—Ä)
        line = []
        for i in range(-4, 5):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')  # –ì—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å–∫–∏
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–≥—Ä–æ–∑
        line_str = ''.join(line)
        
        # –û—Ç–∫—Ä—ã—Ç–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞: .XXXX.
        if f'.{symbol * 4}.' in line_str:
            threats += 2  # –û—Ç–∫—Ä—ã—Ç–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞ = 2 —É–≥—Ä–æ–∑—ã
        
        # –ß–µ—Ç–≤–µ—Ä–∫–∞ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã: XXXX.
        elif f'{symbol * 4}.' in line_str or f'.{symbol * 4}' in line_str:
            threats += 1
        
        # –û—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞: .XXX.
        elif f'.{symbol * 3}.' in line_str:
            threats += 1
        
        return threats
    
    def _creates_four_three_combo(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ 4+3"""
        board[row][col] = symbol
        
        has_four = False
        has_three = False
        
        for dr, dc in self.directions:
            pattern = self._get_line_pattern(board, row, col, dr, dc, symbol)
            
            if 'FOUR' in pattern:
                has_four = True
            elif 'THREE' in pattern:
                has_three = True
        
        board[row][col] = '.'
        return has_four and has_three
    
    def _get_line_pattern(self, board, row, col, dr, dc, symbol) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –ª–∏–Ω–∏–∏"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        count = 1
        
        # –í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
        r, c = row + dr, col + dc
        while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
            count += 1
            r, c = r + dr, c + dc
        
        # –í –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
        r, c = row - dr, col - dc
        while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
            count += 1
            r, c = r - dr, c - dc
        
        if count >= 5:
            return 'FIVE'
        elif count == 4:
            return 'FOUR'
        elif count == 3:
            return 'THREE'
        else:
            return 'TWO'
    
    def _find_critical_move(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–æ–¥–æ–≤ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è)"""
        board = game.board
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        for row, col in valid_moves:
            if self._check_winning_move(board, row, col, self.symbol):
                return (row, col)
        
        # 2. –ö–†–ò–¢–ò–ß–ù–û: –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        for row, col in valid_moves:
            if self._check_winning_move(board, row, col, self.opponent_symbol):
                return (row, col)
        
        # 3. –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —á–µ—Ç–≤–µ—Ä–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã)
        for row, col in valid_moves:
            if self._creates_open_four(board, row, col, self.opponent_symbol):
                return (row, col)
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —á–µ—Ç–≤–µ—Ä–∫—É (–ü–û–í–´–®–ï–ù –ü–†–ò–û–†–ò–¢–ï–¢)
        for row, col in valid_moves:
            if self._creates_open_four(board, row, col, self.symbol):
                return (row, col)
        
        # 5. –ë–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ç–≤–µ—Ä–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–ª—é–±—É—é)
        for row, col in valid_moves:
            if self._creates_four_threat(board, row, col, self.opponent_symbol):
                return (row, col)
        
        # 6. –°–æ–∑–¥–∞–µ–º —á–µ—Ç–≤–µ—Ä–∫—É
        for row, col in valid_moves:
            if self._creates_four_threat(board, row, col, self.symbol):
                return (row, col)
        
        # 7. –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–æ–π–Ω—É—é —Ç—Ä–æ–π–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        for row, col in valid_moves:
            if self._creates_double_three(board, row, col, self.opponent_symbol):
                return (row, col)
        
        # 8. –°–æ–∑–¥–∞–µ–º –¥–≤–æ–π–Ω—É—é —Ç—Ä–æ–π–∫—É
        for row, col in valid_moves:
            if self._creates_double_three(board, row, col, self.symbol):
                return (row, col)
        
        # 9. –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≥—Ä–æ–∑
        critical_defense = self._find_critical_defense(board, valid_moves)
        if critical_defense:
            return critical_defense
        
        # 10. –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —Ç—Ä–æ–π–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        dangerous_three = self._find_dangerous_open_three(board, valid_moves)
        if dangerous_three:
            return dangerous_three
        
        return None
    
    def _creates_double_three(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥–≤–æ–π–Ω–æ–π —Ç—Ä–æ–π–∫–∏"""
        board[row][col] = symbol
        
        three_count = 0
        for dr, dc in self.directions:
            if self._has_open_three_in_direction(board, row, col, dr, dc, symbol):
                three_count += 1
        
        board[row][col] = '.'
        return three_count >= 2
    
    def _has_open_three_in_direction(self, board, row, col, dr, dc, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç—Ä–æ–π–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é 7 –∫–ª–µ—Ç–æ–∫
        line = []
        for i in range(-3, 4):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')
        
        line_str = ''.join(line)
        return f'.{symbol * 3}.' in line_str
    
    def _creates_four_threat(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ —É–≥—Ä–æ–∑—É —á–µ—Ç–≤–µ—Ä–∫–∏"""
        board[row][col] = symbol
        
        for dr, dc in self.directions:
            count = 1
            
            # –í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row + dr, col + dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r + dr, c + dc
            
            # –í –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row - dr, col - dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r - dr, c - dc
            
            if count >= 4:
                board[row][col] = '.'
                return True
        
        board[row][col] = '.'
        return False
    
    def _blocks_open_three(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ —Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç—É—é —Ç—Ä–æ–π–∫—É"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        board[row][col] = self.opponent_symbol if symbol == self.symbol else self.symbol
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞ –¥–æ —ç—Ç–æ–≥–æ —Ö–æ–¥–∞
        for dr, dc in self.directions:
            if self._check_open_three_pattern(board, row, col, dr, dc, symbol):
                board[row][col] = '.'
                return True
        
        board[row][col] = '.'
        return False
    
    def _check_open_three_pattern(self, board, row, col, dr, dc, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç—Ä–æ–π–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ .XXX.
        for start_offset in range(-4, 2):
            pattern = []
            for i in range(5):
                r = row + (start_offset + i) * dr
                c = col + (start_offset + i) * dc
                
                if 0 <= r < len(board) and 0 <= c < len(board[0]):
                    pattern.append(board[r][c])
                else:
                    pattern.append('#')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω .XXX.
            if (len(pattern) == 5 and 
                pattern[0] == '.' and 
                pattern[4] == '.' and
                all(pattern[i] == symbol for i in range(1, 4))):
                return True
        
        return False
    
    def _find_strategic_move(self, game, valid_moves, start_time) -> Tuple[int, int]:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        best_score = float('-inf')
        best_moves = []
        
        for row, col in valid_moves:
            if time.time() - start_time > self.max_time:
                break
                
            score = self._evaluate_strategic_move(game.board, row, col)
            
            if score > best_score:
                best_score = score
                best_moves = [(row, col)]
            elif score == best_score:
                best_moves.append((row, col))
        
        return random.choice(best_moves) if best_moves else random.choice(valid_moves)
    
    def _evaluate_strategic_move(self, board, row, col) -> float:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —Ö–æ–¥–∞"""
        score = 0
        
        # –û—Ü–µ–Ω–∫–∞ –¥–ª—è –ò–ò
        board[row][col] = self.symbol
        ai_score = self._evaluate_position_advanced(board, row, col, self.symbol)
        
        # –û—Ü–µ–Ω–∫–∞ –∑–∞—â–∏—Ç—ã
        board[row][col] = self.opponent_symbol
        defense_score = self._evaluate_position_advanced(board, row, col, self.opponent_symbol)
        
        board[row][col] = '.'
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–∞—Ç–∞–∫–∞ + –∑–∞—â–∏—Ç–∞)
        # –ó–∞—â–∏—Ç–∞ –≤–∞–∂–Ω–µ–µ –∞—Ç–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π
        score = ai_score + defense_score * 1.2
        
        # –ù–û–í–´–ï –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
        
        # 1. –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        space_control = self._evaluate_space_control(board, row, col)
        score += space_control
        
        # 2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è
        development_potential = self._evaluate_development_potential(board, row, col)
        score += development_potential
        
        # 3. –ò–∑–±–µ–≥–∞–Ω–∏–µ "–º–µ—Ä—Ç–≤—ã—Ö" –ø–æ–∑–∏—Ü–∏–π
        dead_position_penalty = self._evaluate_dead_position(board, row, col)
        score -= dead_position_penalty
        
        # 4. –ë–æ–Ω—É—Å –∑–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—É–º–µ–Ω—å—à–µ–Ω)
        center = len(board) // 2
        distance_from_center = abs(row - center) + abs(col - center)
        score += max(0, 30 - distance_from_center * 3)  # –£–º–µ–Ω—å—à–µ–Ω –±–æ–Ω—É—Å
        
        # 5. –°–≤—è–∑–Ω–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏
        connectivity_bonus = self._evaluate_connectivity(board, row, col)
        score += connectivity_bonus
        
        return score
    
    def _evaluate_position_advanced(self, board, row, col, symbol) -> float:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        score = 0
        
        for dr, dc in self.directions:
            line_score = self._evaluate_line_advanced(board, row, col, dr, dc, symbol)
            score += line_score
        
        return score
    
    def _evaluate_line_advanced(self, board, row, col, dr, dc, symbol) -> float:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–∏–Ω–∏–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
        line = []
        for i in range(-6, 7):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')
        
        score = 0
        line_str = ''.join(line)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        patterns = {
            f'{symbol * 5}': 100000,  # –ü—è—Ç–µ—Ä–∫–∞
            f'.{symbol * 4}.': 50000,  # –û—Ç–∫—Ä—ã—Ç–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞
            f'{symbol * 4}.': 10000,   # –ß–µ—Ç–≤–µ—Ä–∫–∞
            f'.{symbol * 4}': 10000,   # –ß–µ—Ç–≤–µ—Ä–∫–∞
            f'.{symbol * 3}.': 5000,   # –û—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞
            f'{symbol * 3}.': 1000,    # –¢—Ä–æ–π–∫–∞
            f'.{symbol * 3}': 1000,    # –¢—Ä–æ–π–∫–∞
            f'.{symbol * 2}.': 200,    # –û—Ç–∫—Ä—ã—Ç–∞—è –¥–≤–æ–π–∫–∞
            f'{symbol * 2}': 50,       # –î–≤–æ–π–∫–∞
        }
        
        for pattern, value in patterns.items():
            score += line_str.count(pattern) * value
        
        return score
    
    def _check_winning_move(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π —Ö–æ–¥ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é"""
        board[row][col] = symbol
        
        for dr, dc in self.directions:
            count = 1
            
            # –í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row + dr, col + dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r + dr, c + dc
            
            # –í –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row - dr, col - dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r - dr, c - dc
            
            if count >= 5:
                board[row][col] = '.'
                return True
        
        board[row][col] = '.'
        return False
    
    def _creates_open_four(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç—É—é —á–µ—Ç–≤–µ—Ä–∫—É"""
        board[row][col] = symbol
        
        for dr, dc in self.directions:
            for start_offset in range(-5, 1):
                sequence = []
                for i in range(6):
                    r = row + (start_offset + i) * dr
                    c = col + (start_offset + i) * dc
                    
                    if 0 <= r < len(board) and 0 <= c < len(board[0]):
                        sequence.append(board[r][c])
                    else:
                        sequence.append('#')
                
                if (len(sequence) == 6 and 
                    sequence[0] == '.' and 
                    sequence[5] == '.' and
                    all(sequence[i] == symbol for i in range(1, 5))):
                    board[row][col] = '.'
                    return True
        
        board[row][col] = '.'
        return False
    
    def _find_slow_threat_defense(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∑–∞—â–∏—Ç—ã –æ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è —É–≥—Ä–æ–∑"""
        board = game.board
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –æ–ø–∞—Å–Ω—ã–º–∏
        dangerous_positions = []
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            threat_level = self._evaluate_potential_threat(board, row, col, self.opponent_symbol)
            
            if threat_level > 2000:  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —É–≥—Ä–æ–∑—ã
                dangerous_positions.append((row, col, threat_level))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —É–≥—Ä–æ–∑—ã
        dangerous_positions.sort(key=lambda x: x[2], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–∞–º–æ–π –æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if dangerous_positions:
            return (dangerous_positions[0][0], dangerous_positions[0][1])
        
        return None
    
    def _evaluate_potential_threat(self, board, row, col, symbol) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É–≥—Ä–æ–∑—É –ø–æ–∑–∏—Ü–∏–∏"""
        board[row][col] = symbol
        
        threat_score = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for dr, dc in self.directions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–∏—Ç–∏–µ –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            line_potential = self._analyze_line_potential(board, row, col, dr, dc, symbol)
            threat_score += line_potential
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è
        development_lines = self._count_development_lines(board, row, col, symbol)
        if development_lines >= 2:
            threat_score += 1500  # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        
        board[row][col] = '.'
        return threat_score
    
    def _analyze_line_potential(self, board, row, col, dr, dc, symbol) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏–Ω–∏–∏"""
        potential = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é (7 –∫–ª–µ—Ç–æ–∫ –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
        line = []
        positions = []
        
        for i in range(-7, 8):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
                positions.append((r, c))
            else:
                line.append('#')
                positions.append(None)
        
        line_str = ''.join(line)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è
        patterns = {
            f'.{symbol}..{symbol}.': 800,    # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ç—Ä–æ–π–∫–∞ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
            f'.{symbol}.{symbol}.': 600,     # –î–≤–æ–π–∫–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
            f'..{symbol}{symbol}..': 700,    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –¥–≤–æ–π–∫–∞
            f'.{symbol}{symbol}.': 400,      # –ü—Ä–æ—Å—Ç–∞—è –¥–≤–æ–π–∫–∞
            f'...{symbol}...': 200,          # –û–¥–∏–Ω–æ—á–∫–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
        }
        
        for pattern, value in patterns.items():
            potential += line_str.count(pattern) * value
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        empty_space = line_str.count('.')
        if empty_space >= 5:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
            potential += empty_space * 50
        
        return potential
    
    def _count_development_lines(self, board, row, col, symbol) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è"""
        development_count = 0
        
        for dr, dc in self.directions:
            if self._has_development_potential(board, row, col, dr, dc, symbol):
                development_count += 1
        
        return development_count
    
    def _has_development_potential(self, board, row, col, dr, dc, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –∫–ª–µ—Ç–æ–∫ –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
        empty_count = 0
        symbol_count = 0
        
        for i in range(-5, 6):
            if i == 0:
                continue
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                if board[r][c] == '.':
                    empty_count += 1
                elif board[r][c] == symbol:
                    symbol_count += 1
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –µ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –∏ –µ—Å—Ç—å —Å–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã
        return empty_count >= 3 and symbol_count >= 1
    
    def _evaluate_space_control(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        control_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å 5x5 –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏
        for dr in range(-2, 3):
            for dc in range(-2, 3):
                r, c = row + dr, col + dc
                if 0 <= r < len(board) and 0 <= c < len(board[0]):
                    if board[r][c] == '.':
                        # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –¥–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å
                        distance = abs(dr) + abs(dc)
                        control_score += max(0, 50 - distance * 10)
                    elif board[r][c] == self.symbol:
                        # –°–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã —É—Å–∏–ª–∏–≤–∞—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å
                        control_score += 30
        
        return control_score
    
    def _evaluate_development_potential(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        potential_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        for dr, dc in self.directions:
            line_potential = 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–Ω–∏—é 9 –∫–ª–µ—Ç–æ–∫
            for i in range(-4, 5):
                r, c = row + i * dr, col + i * dc
                if 0 <= r < len(board) and 0 <= c < len(board[0]):
                    if board[r][c] == '.':
                        line_potential += 10
                    elif board[r][c] == self.symbol:
                        line_potential += 20
                    elif board[r][c] == self.opponent_symbol:
                        line_potential -= 15  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
            
            potential_score += max(0, line_potential)
        
        return potential_score
    
    def _evaluate_dead_position(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç "–º–µ—Ä—Ç–≤–æ—Å—Ç—å" –ø–æ–∑–∏—Ü–∏–∏ (–∑–∞–∫—Ä—ã—Ç—ã–µ –ª–∏–Ω–∏–∏)"""
        dead_penalty = 0
        
        for dr, dc in self.directions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ª–∏–Ω–∏—è —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
            blocked_count = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            for i in range(1, 5):
                r, c = row + i * dr, col + i * dc
                if (r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or 
                    board[r][c] == self.opponent_symbol):
                    blocked_count += 1
                    break
                elif board[r][c] == self.symbol:
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            for i in range(1, 5):
                r, c = row - i * dr, col - i * dc
                if (r < 0 or r >= len(board) or c < 0 or c >= len(board[0]) or 
                    board[r][c] == self.opponent_symbol):
                    blocked_count += 1
                    break
                elif board[r][c] == self.symbol:
                    break
            
            # –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω - —à—Ç—Ä–∞—Ñ
            if blocked_count >= 2:
                dead_penalty += 200
        
        return dead_penalty
    
    def _evaluate_connectivity(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏"""
        connectivity_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if dr == 0 and dc == 0:
                    continue
                
                r, c = row + dr, col + dc
                if 0 <= r < len(board) and 0 <= c < len(board[0]):
                    if board[r][c] == self.symbol:
                        connectivity_score += 100
                    elif board[r][c] == self.opponent_symbol:
                        connectivity_score += 50  # –î–∞–∂–µ —Å–æ–ø–µ—Ä–Ω–∏–∫ –¥–∞–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å
        
        return connectivity_score
    
    def _find_forced_sequence_defense(self, board, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        # –ò—â–µ–º —Ö–æ–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –Ω–µ–æ—Å—Ç–∞–Ω–æ–≤–∏–º—ã–µ —É–≥—Ä–æ–∑—ã
        critical_defenses = []
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ —Å—Ö–æ–¥–∏—Ç —Å—é–¥–∞
            board[row][col] = self.opponent_symbol
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —É–≥—Ä–æ–∑—ã
            threat_level = self._analyze_forced_threats(board, row, col, self.opponent_symbol)
            
            board[row][col] = '.'
            
            if threat_level > 3000:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã
                critical_defenses.append((row, col, threat_level))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–∞–º–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ–π —É–≥—Ä–æ–∑—ã
        if critical_defenses:
            critical_defenses.sort(key=lambda x: x[2], reverse=True)
            return (critical_defenses[0][0], critical_defenses[0][1])
        
        return None
    
    def _analyze_forced_threats(self, board, row, col, symbol) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã –æ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        threat_score = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —É–≥—Ä–æ–∑–∞–º–∏
        threat_directions = 0
        
        for dr, dc in self.directions:
            direction_threat = self._evaluate_direction_threat(board, row, col, dr, dc, symbol)
            threat_score += direction_threat
            
            if direction_threat > 1000:  # –°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                threat_directions += 1
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–≥—Ä–∞)
        if threat_directions >= 2:
            threat_score += 2000  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã = —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
        return threat_score
    
    def _evaluate_direction_threat(self, board, row, col, dr, dc, symbol) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É–≥—Ä–æ–∑—É –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        threat = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é 9 –∫–ª–µ—Ç–æ–∫
        line = []
        for i in range(-4, 5):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')
        
        line_str = ''.join(line)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≥—Ä–æ–∑—ã
        if f'{symbol * 4}' in line_str:
            threat += 5000  # –ß–µ—Ç–≤–µ—Ä–∫–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É–≥—Ä–æ–∑–∞
        elif f'.{symbol * 3}.' in line_str:
            threat += 3000  # –û—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞ - —Å–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞
        elif f'{symbol * 3}.' in line_str or f'.{symbol * 3}' in line_str:
            threat += 1500  # –¢—Ä–æ–π–∫–∞ - —É–º–µ—Ä–µ–Ω–Ω–∞—è —É–≥—Ä–æ–∑–∞
        elif f'.{symbol * 2}.' in line_str:
            threat += 800   # –û—Ç–∫—Ä—ã—Ç–∞—è –¥–≤–æ–π–∫–∞ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞
        
        return threat
    
    def _find_aggressive_move(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≥—Ä–æ–∑"""
        board = game.board
        
        # –ò—â–µ–º —Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã
        aggressive_moves = []
        
        for row, col in valid_moves:
            # –û—Ü–µ–Ω–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
            aggression_score = self._evaluate_aggression(board, row, col, self.symbol)
            
            if aggression_score > 1500:  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–∏
                aggressive_moves.append((row, col, aggression_score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        if aggressive_moves:
            aggressive_moves.sort(key=lambda x: x[2], reverse=True)
            return (aggressive_moves[0][0], aggressive_moves[0][1])
        
        return None
    
    def _evaluate_aggression(self, board, row, col, symbol) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å —Ö–æ–¥–∞"""
        board[row][col] = symbol
        
        aggression_score = 0
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑
        threat_count = 0
        for dr, dc in self.directions:
            if self._creates_threat_in_direction(board, row, col, dr, dc, symbol):
                threat_count += 1
        
        if threat_count >= 2:
            aggression_score += 2000  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≥—Ä–æ–∑—ã
        elif threat_count == 1:
            aggression_score += 800   # –û–¥–Ω–∞ —É–≥—Ä–æ–∑–∞
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–æ–µ–∫
        open_threes = self._count_open_threes(board, row, col, symbol)
        aggression_score += open_threes * 1200
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä–æ–∫
        fours = self._count_fours(board, row, col, symbol)
        aggression_score += fours * 3000
        
        # 4. –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
        center_control = self._evaluate_center_control(board, row, col, symbol)
        aggression_score += center_control
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ "–≤–∏–ª–æ–∫" (–¥–≤–æ–π–Ω—ã—Ö —É–≥—Ä–æ–∑)
        fork_potential = self._evaluate_fork_potential(board, row, col, symbol)
        aggression_score += fork_potential
        
        board[row][col] = '.'
        return aggression_score
    
    def _creates_threat_in_direction(self, board, row, col, dr, dc, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É–≥—Ä–æ–∑—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é 7 –∫–ª–µ—Ç–æ–∫
        line = []
        for i in range(-3, 4):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')
        
        line_str = ''.join(line)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–≥—Ä–æ–∑—ã
        threats = [
            f'.{symbol * 3}.',  # –û—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞
            f'{symbol * 3}.',   # –¢—Ä–æ–π–∫–∞ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            f'.{symbol * 3}',   # –¢—Ä–æ–π–∫–∞ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            f'.{symbol * 2}.{symbol}.', # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ç—Ä–æ–π–∫–∞
            f'.{symbol}.{symbol * 2}.', # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è —Ç—Ä–æ–π–∫–∞
        ]
        
        return any(threat in line_str for threat in threats)
    
    def _count_open_threes(self, board, row, col, symbol) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–æ–π–∫–∏"""
        count = 0
        for dr, dc in self.directions:
            if self._has_open_three_in_direction(board, row, col, dr, dc, symbol):
                count += 1
        return count
    
    def _count_fours(self, board, row, col, symbol) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–µ—Ç–≤–µ—Ä–∫–∏"""
        count = 0
        for dr, dc in self.directions:
            line_count = 1
            
            # –í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row + dr, col + dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                line_count += 1
                r, c = r + dr, c + dc
            
            # –í –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row - dr, col - dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                line_count += 1
                r, c = r - dr, c - dc
            
            if line_count >= 4:
                count += 1
        
        return count
    
    def _evaluate_center_control(self, board, row, col, symbol) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π"""
        center = len(board) // 2
        distance_from_center = abs(row - center) + abs(col - center)
        
        # –ë–æ–Ω—É—Å –∑–∞ –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É
        center_bonus = max(0, 100 - distance_from_center * 10)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
        if row == center or col == center:
            center_bonus += 200
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä
        if abs(row - center) == abs(col - center):
            center_bonus += 150
        
        return center_bonus
    
    def _evaluate_fork_potential(self, board, row, col, symbol) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–ª–æ–∫ (–¥–≤–æ–π–Ω—ã—Ö —É–≥—Ä–æ–∑)"""
        fork_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–∏–ª–æ–∫
        potential_lines = 0
        
        for dr, dc in self.directions:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ª–∏–Ω–∏–∏
            line_potential = self._analyze_line_fork_potential(board, row, col, dr, dc, symbol)
            if line_potential > 0:
                potential_lines += 1
                fork_score += line_potential
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        if potential_lines >= 3:
            fork_score += 500  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∏–ª–∫–∏
        elif potential_lines >= 2:
            fork_score += 200  # –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        
        return fork_score
    
    def _analyze_line_fork_potential(self, board, row, col, dr, dc, symbol) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∏–ª–∫–∏ –≤ –ª–∏–Ω–∏–∏"""
        potential = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é 9 –∫–ª–µ—Ç–æ–∫
        line = []
        for i in range(-4, 5):
            r, c = row + i * dr, col + i * dc
            if 0 <= r < len(board) and 0 <= c < len(board[0]):
                line.append(board[r][c])
            else:
                line.append('#')
        
        line_str = ''.join(line)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –≤–∏–ª–∫–∏
        patterns = {
            f'..{symbol}..': 100,    # –û–¥–∏–Ω–æ—á–∫–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
            f'.{symbol}.{symbol}.': 200,  # –†–∞–∑–æ—Ä–≤–∞–Ω–Ω–∞—è –¥–≤–æ–π–∫–∞
            f'..{symbol}{symbol}.': 150,  # –î–≤–æ–π–∫–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
            f'.{symbol}{symbol}..': 150,  # –î–≤–æ–π–∫–∞ —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
        }
        
        for pattern, value in patterns.items():
            potential += line_str.count(pattern) * value
        
        return potential
    
    def _find_critical_defense(self, board, valid_moves) -> Optional[Tuple[int, int]]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≥—Ä–æ–∑"""
        critical_threats = []
        
        for row, col in valid_moves:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –µ—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ —Å—Ö–æ–¥–∏—Ç —Å—é–¥–∞
            board[row][col] = self.opponent_symbol
            
            threat_level = 0
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑
            multiple_threats = self._count_multiple_threats(board, row, col, self.opponent_symbol)
            threat_level += multiple_threats * 1000
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            unblockable = self._creates_unblockable_threat(board, row, col, self.opponent_symbol)
            if unblockable:
                threat_level += 2000
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
            winning_sequence = self._creates_winning_sequence(board, row, col, self.opponent_symbol)
            if winning_sequence:
                threat_level += 1500
            
            board[row][col] = '.'
            
            if threat_level > 1500:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
                critical_threats.append((row, col, threat_level))
        
        if critical_threats:
            critical_threats.sort(key=lambda x: x[2], reverse=True)
            return (critical_threats[0][0], critical_threats[0][1])
        
        return None
    
    def _count_multiple_threats(self, board, row, col, symbol) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —É–≥—Ä–æ–∑"""
        threat_count = 0
        
        for dr, dc in self.directions:
            if self._creates_threat_in_direction(board, row, col, dr, dc, symbol):
                threat_count += 1
        
        return threat_count
    
    def _creates_unblockable_threat(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–±–ª–æ–∫–∏—Ä—É–µ–º–æ–π —É–≥—Ä–æ–∑—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        open_three_count = 0
        
        for dr, dc in self.directions:
            if self._has_open_three_in_direction(board, row, col, dr, dc, symbol):
                open_three_count += 1
        
        return open_three_count >= 2
    
    def _creates_winning_sequence(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–∏–ø–∞ 4+3, 3+3+3 –∏ —Ç.–¥.
        fours = self._count_fours(board, row, col, symbol)
        threes = self._count_open_threes(board, row, col, symbol)
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —á–µ—Ç–≤–µ—Ä–∫–∞ + —Ç—Ä–æ–π–∫–∞ = –≤—ã–∏–≥—Ä—ã—à
        if fours >= 1 and threes >= 1:
            return True
        
        # –¢—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–æ–π–∫–∏ = –≤—ã–∏–≥—Ä—ã—à
        if threes >= 3:
            return True
        
        return False
    
    def _find_dangerous_open_three(self, board, valid_moves) -> Optional[Tuple[int, int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø–∞—Å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        dangerous_threes = []
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ —Ö–æ–¥ –æ–ø–∞—Å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Ç—Ä–æ–π–∫—É
            if self._blocks_dangerous_open_three(board, row, col):
                danger_level = self._evaluate_three_danger(board, row, col)
                dangerous_threes.append((row, col, danger_level))
        
        if dangerous_threes:
            dangerous_threes.sort(key=lambda x: x[2], reverse=True)
            return (dangerous_threes[0][0], dangerous_threes[0][1])
        
        return None
    
    def _blocks_dangerous_open_three(self, board, row, col) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–ª–æ–∫–∏—Ä—É–µ—Ç –ª–∏ —Ö–æ–¥ –æ–ø–∞—Å–Ω—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Ç—Ä–æ–π–∫—É"""
        # –°—Ç–∞–≤–∏–º —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
        board[row][col] = self.symbol
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–¥–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        for dr, dc in self.directions:
            if self._check_blocked_open_three(board, row, col, dr, dc, self.opponent_symbol):
                board[row][col] = '.'
                return True
        
        board[row][col] = '.'
        return False
    
    def _check_blocked_open_three(self, board, row, col, dr, dc, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ–∫—Ä—É–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        for offset in range(-2, 3):
            pattern = []
            for i in range(5):
                r = row + (offset + i - 2) * dr
                c = col + (offset + i - 2) * dc
                
                if r == row and c == col:
                    pattern.append('.')  # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—É—Å—Ç—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                elif 0 <= r < len(board) and 0 <= c < len(board[0]):
                    pattern.append(board[r][c])
                else:
                    pattern.append('#')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–¥–µ—Å—å –ø–∞—Ç—Ç–µ—Ä–Ω .XXX.
            pattern_str = ''.join(pattern)
            if f'.{symbol * 3}.' in pattern_str:
                return True
        
        return False
    
    def _evaluate_three_danger(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç—Ä–æ–π–∫–∏"""
        danger = 0
        
        # –ë–∞–∑–æ–≤–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç—Ä–æ–π–∫–∏
        danger += 500
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∏–≥—É—Ä—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        for dr in [-1, 0, 1]:
            for dc in [-1, 0, 1]:
                if dr == 0 and dc == 0:
                    continue
                
                r, c = row + dr, col + dc
                if (0 <= r < len(board) and 0 <= c < len(board[0]) and 
                    board[r][c] == self.opponent_symbol):
                    danger += 100
        
        # –û–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥–æ—Å–∫–µ
        center = len(board) // 2
        distance_from_center = abs(row - center) + abs(col - center)
        danger += max(0, 200 - distance_from_center * 20)
        
        return danger 