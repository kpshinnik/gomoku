import random
import time
import logging
from typing import List, Tuple, Dict, Optional

logger = logging.getLogger(__name__)

class AIPlayer:
    def __init__(self, symbol, max_depth=4):
        self.symbol = symbol
        self.opponent_symbol = 'X' if symbol == 'O' else 'O'
        self.max_depth = max_depth
        self.max_time = 5.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–π (–≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏)
        self.patterns = {
            # –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            'FIVE': ([self.symbol] * 5, 100000),
            'OPEN_FOUR': ([None, self.symbol, self.symbol, self.symbol, self.symbol, None], 50000),
            'FOUR': ([self.symbol] * 4, 10000),
            
            # –£–≥—Ä–æ–∑—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã)
            'OPP_FIVE': ([self.opponent_symbol] * 5, -100000),
            'OPP_OPEN_FOUR': ([None, self.opponent_symbol, self.opponent_symbol, self.opponent_symbol, self.opponent_symbol, None], -50000),
            'OPP_FOUR': ([self.opponent_symbol] * 4, -10000),
            
            # –¢—Ä–æ–π–∫–∏
            'OPEN_THREE': ([None, self.symbol, self.symbol, self.symbol, None], 1000),
            'THREE': ([self.symbol] * 3, 500),
            'OPP_OPEN_THREE': ([None, self.opponent_symbol, self.opponent_symbol, self.opponent_symbol, None], -1000),
            'OPP_THREE': ([self.opponent_symbol] * 3, -500),
            
            # –î–≤–æ–π–∫–∏
            'OPEN_TWO': ([None, self.symbol, self.symbol, None], 100),
            'TWO': ([self.symbol] * 2, 50),
            'OPP_OPEN_TWO': ([None, self.opponent_symbol, self.opponent_symbol, None], -100),
            'OPP_TWO': ([self.opponent_symbol] * 2, -50),
            
            # –û–¥–∏–Ω–æ—á–∫–∏
            'ONE': ([self.symbol], 10),
            'OPP_ONE': ([self.opponent_symbol], -10)
        }
        
    def get_move(self, game) -> Optional[Tuple[int, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ö–æ–¥ –¥–ª—è –ò–ò"""
        start_time = time.time()
        
        try:
            valid_moves = game.get_valid_moves()
            if not valid_moves:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –ò–ò")
                return None
                
            logger.info(f"ü§ñ –ò–ò –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ {len(valid_moves)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤")
            
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ - —Å—Ç–∞–≤–∏–º –≤ —Ü–µ–Ω—Ç—Ä
            if game.move_count == 0:
                center = game.board_size // 2
                return (center, center)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ö–æ–¥—ã (–ø–æ–±–µ–¥–∞/–∑–∞—â–∏—Ç–∞)
            critical_move = self._find_critical_move(game, valid_moves)
            if critical_move:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥: {critical_move}")
                return critical_move
            
            # –ò—â–µ–º –ª—É—á—à–∏–π —Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é minimax
            best_move = self._find_best_move(game, valid_moves, start_time)
            
            elapsed_time = time.time() - start_time
            logger.info(f"ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª —Ö–æ–¥ {best_move} –∑–∞ {elapsed_time:.2f}—Å")
            
            return best_move
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return random.choice(valid_moves) if valid_moves else None
    
    def _find_critical_move(self, game, valid_moves) -> Optional[Tuple[int, int]]:
        """–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–æ–¥–æ–≤ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è)"""
        board = game.board
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ò–ò –≤—ã–∏–≥—Ä–∞—Ç—å —ç—Ç–∏–º —Ö–æ–¥–æ–º
            if self._check_winning_move(board, row, col, self.symbol):
                return (row, col)
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è –æ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            if self._check_winning_move(board, row, col, self.opponent_symbol):
                return (row, col)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥—Ä–æ–∑—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–µ—Ç–≤–µ—Ä–æ–∫
        for row, col in valid_moves:
            if self._creates_open_four(board, row, col, self.symbol):
                return (row, col)
        
        # –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —á–µ—Ç–≤–µ—Ä–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        for row, col in valid_moves:
            if self._creates_open_four(board, row, col, self.opponent_symbol):
                return (row, col)
        
        return None
    
    def _check_winning_move(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π —Ö–æ–¥ –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
        board[row][col] = symbol
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        
        for dr, dc in directions:
            count = 1  # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row + dr, col + dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r + dr, c + dc
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
            r, c = row - dr, col - dc
            while 0 <= r < len(board) and 0 <= c < len(board[0]) and board[r][c] == symbol:
                count += 1
                r, c = r - dr, c - dc
            
            if count >= 5:
                board[row][col] = ''  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
                return True
        
        board[row][col] = ''  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
        return False
    
    def _creates_open_four(self, board, row, col, symbol) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç—É—é —á–µ—Ç–≤–µ—Ä–∫—É"""
        board[row][col] = symbol
        
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        
        for dr, dc in directions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–æ–π 6 (–¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π —á–µ—Ç–≤–µ—Ä–∫–∏)
            for start_offset in range(-5, 1):
                sequence = []
                for i in range(6):
                    r = row + (start_offset + i) * dr
                    c = col + (start_offset + i) * dc
                    
                    if 0 <= r < len(board) and 0 <= c < len(board[0]):
                        sequence.append(board[r][c])
                    else:
                        sequence.append('#')  # –ì—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å–∫–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–∫—Ä—ã—Ç–æ–π —á–µ—Ç–≤–µ—Ä–∫–∏: .XXXX.
                if (len(sequence) == 6 and 
                    sequence[0] == '' and 
                    sequence[5] == '' and
                    all(sequence[i] == symbol for i in range(1, 5))):
                    board[row][col] = ''
                    return True
        
        board[row][col] = ''
        return False
    
    def _find_best_move(self, game, valid_moves, start_time) -> Tuple[int, int]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
        best_score = float('-inf')
        best_moves = []
        
        for row, col in valid_moves:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
            if time.time() - start_time > self.max_time:
                break
                
            score = self._evaluate_move(game.board, row, col)
            
            if score > best_score:
                best_score = score
                best_moves = [(row, col)]
            elif score == best_score:
                best_moves.append((row, col))
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        return random.choice(best_moves) if best_moves else random.choice(valid_moves)
    
    def _evaluate_move(self, board, row, col) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É
        board[row][col] = self.symbol
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ò–ò
        ai_score = self._evaluate_position(board, self.symbol)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ —Å—Ç–∞–≤–∏–º —Ñ–∏–≥—É—Ä—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞—â–∏—Ç—ã
        board[row][col] = self.opponent_symbol
        opponent_score = self._evaluate_position(board, self.opponent_symbol)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–∏–≥—É—Ä—É
        board[row][col] = ''
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ (–∞—Ç–∞–∫–∞ + –∑–∞—â–∏—Ç–∞)
        total_score = ai_score - opponent_score * 0.9  # –ó–∞—â–∏—Ç–∞ —á—É—Ç—å –º–µ–Ω–µ–µ –≤–∞–∂–Ω–∞
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–∑–∏—Ü–∏—é –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
        center = len(board) // 2
        distance_to_center = abs(row - center) + abs(col - center)
        center_bonus = max(0, 14 - distance_to_center) * 5
        
        return total_score + center_bonus
    
    def _evaluate_position(self, board, symbol) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        score = 0
        board_size = len(board)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏–Ω–∏–∏
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        
        for row in range(board_size):
            for col in range(board_size):
                for dr, dc in directions:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω–∏—é –¥–ª–∏–Ω–æ–π 5
                    line = []
                    for i in range(5):
                        r, c = row + i * dr, col + i * dc
                        if 0 <= r < board_size and 0 <= c < board_size:
                            cell = board[r][c]
                            line.append(cell if cell != '' else None)
                        else:
                            line.append('#')  # –ì—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å–∫–∏
                    
                    # –û—Ü–µ–Ω–∫–∞ –ª–∏–Ω–∏–∏
                    score += self._evaluate_line(line, symbol)
        
        return score
    
    def _evaluate_line(self, line, symbol) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–∑ 5 –∫–ª–µ—Ç–æ–∫"""
        if len(line) != 5:
            return 0
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—ã
        my_count = line.count(symbol)
        opp_count = line.count('X' if symbol == 'O' else 'O')
        empty_count = line.count(None)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–≥—É—Ä—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –ª–∏–Ω–∏—è –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞
        if opp_count > 0:
            return 0
        
        # –û—Ü–µ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä
        if my_count == 5:
            return 100000  # –ü–æ–±–µ–¥–∞
        elif my_count == 4 and empty_count == 1:
            return 10000   # –ß–µ—Ç–≤–µ—Ä–∫–∞
        elif my_count == 3 and empty_count == 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞—è –ª–∏ —Ç—Ä–æ–π–∫–∞
            if line[0] is None and line[4] is None:
                return 1000  # –û—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞
            else:
                return 500   # –û–±—ã—á–Ω–∞—è —Ç—Ä–æ–π–∫–∞
        elif my_count == 2 and empty_count == 3:
            return 100     # –î–≤–æ–π–∫–∞
        elif my_count == 1 and empty_count == 4:
            return 10      # –û–¥–∏–Ω–æ—á–∫–∞
        
        return 0
    
    def _has_adjacent_stones(self, board, row, col) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–∞–º–Ω–∏"""
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if (0 <= nr < len(board) and 0 <= nc < len(board[0]) and 
                board[nr][nc] != ''):
                return True
        
        return False 